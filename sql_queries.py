import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

# DROP TABLES - Dropping all tables 

staging_events_table_drop   = "drop table  if exists s_events"
staging_songs_table_drop    = "drop table  if exists s_songs"
user_table_drop             = "drop table  if exists d_users"
song_table_drop             = "drop table  if exists d_songs"
artist_table_drop           = "drop table  if exists d_artists"
time_table_drop             = "drop table  if exists d_time"
songplay_table_drop         = "drop table  if exists f_songplays"

# CREATE TABLES  - Creating Fact and Dim Tables of project.

# staging event table , we are goin to copy source to this tables

staging_events_table_create = (""" create table if not exists s_events ( artist varchar,auth varchar,firstname varchar, gender char(1), iteminsession int, lastname varchar, length float, level varchar, location varchar, method varchar, page varchar , registration float, sessionid int, song varchar, status int, ts bigint, useragent varchar, userid int )
""")

# staging songs table , we are goin to copy source to this tables
staging_songs_table_create  = (""" create table if not exists s_songs ( num_songs int ,artist_id varchar, artist_latitude float, artist_longitude float, artist_location varchar, artist_name varchar, song_id varchar, title varchar, duration float, year int  )
""")

# dim user table creation
user_table_create   =     ("""create table if not exists d_users 
(user_id int primary key SORTKEY, first_name varchar, last_name varchar, gender char(1),level varchar)
""")

# dim songs table creation
song_table_create   =     ("""create table if not exists d_songs 
(song_id varchar primary key SORTKEY, title varchar, artist_id varchar, year int, duration float)
""")

# dim artist table creation
artist_table_create =     ("""create table if not exists d_artists 
(artist_id varchar primary key SORTKEY, name varchar, location varchar, latitude float, longitude float)
""") 

# dim time table creation
time_table_create   =     ("""create table if not exists d_time 
(start_time timestamp primary key DISTKEY SORTKEY, hour int , day int ,week int ,month int , year int , weekday int )
""")

# fact songplay table creation
songplay_table_create = (""" create table if not exists f_songplays 
(songplay_id bigint GENERATED BY DEFAULT AS IDENTITY(0,1) primary key, start_time timestamp DISTKEY SORTKEY references d_time (start_time) , user_id int references d_users (user_id), level varchar, song_id varchar references d_songs(song_id), artist_id varchar references d_artists (artist_id) , session_id int not null , location varchar, user_agent varchar)
""")


# Populating staging tables from S3 bucket to Redshift.
staging_events_copy = ("""copy s_events 
                            from {} credentials  
                            'aws_iam_role={}'   
                            json {}  
                            region 'us-west-2';
                      """).format(
                        config.get("S3","LOG_DATA"), 
                        config.get("IAM_ROLE", "ARN"), 
                        config.get("S3", "LOG_JSONPATH"))

# Populating staging tables from S3 bucket to Redshift.
staging_songs_copy = ("""copy s_songs from {} credentials 
                            'aws_iam_role={}\' JSON 'auto' truncatecolumns region 
                            'us-west-2';
                     """).format(
                                config.get("S3","SONG_DATA"), 
                                config.get("IAM_ROLE", "ARN"))



# Inserting analytics tables , by  loading  from data staging  - Fact Songplay table
songplay_table_insert = (""" insert into f_songplays (start_time, user_id, level, song_id,artist_id, session_id, location, user_agent)
                              select
                              DISTINCT TIMESTAMP 'epoch' + se.ts/1000 * interval '1 second' as start_time,
                              se.userid as user_id,
                              se.level   as level,
                              ss.song_id as song_id,
                              ss.artist_id as artist_id,
                              se.sessionid as session_id,
                              se.location as location,
                              se.useragent as user_agent
                              from s_events se ,s_songs ss
                              where 
                              se.song    = ss.title and
                              se.length  = ss.duration and
                              se.artist = ss.artist_name and
                              se.page='NextSong';                  
                        """)

# Inserting analytics tables , by  loading  from data staging  - Dim users table
user_table_insert     = (""" insert into d_users (user_id, first_name, last_name, gender, level)
                             select
                                   distinct(userid) as user_id,
                                   firstname        as first_name,
                                   lastname         as last_name,
                                   gender,
                                   level
                                   from s_events
                                   where user_id is not null and page = 'NextSong';
""")

# Inserting analytics tables , by  loading  from data staging  - Dim songs table
song_table_insert     = (""" insert into d_songs( song_id, title, artist_id, year, duration)
                              select 
                                    distinct(song_id),
                                    title   as title,
                                    artist_id,
                                    year,
                                    duration
                                    from s_songs
                                    where song_id is not null ;

""")

# Inserting analytics tables , by  loading  from data staging  - Dim artists table
artist_table_insert   = (""" insert into d_artists (artist_id, name, location, latitude, longitude)
                             select 
                                   distinct(artist_id),
                                   artist_name      as name,
                                   artist_location  as location,
                                   artist_latitude  as latitude,
                                   artist_longitude as longitude
                                   from s_songs
                                   where artist_id is not null;
""")

# Inserting analytics tables , by  loading  from data staging  - Dim time table we are going to extract hour day week month year and weekday from start_time , but we firstly convert it to the timestamp then extract.
time_table_insert = ("""INSERT INTO d_time (start_time, hour, day, week, month, year, weekday)
                        SELECT distinct(t.start_time),
                        EXTRACT (HOUR FROM t.start_time), 
                        EXTRACT (DAY FROM t.start_time),
                        EXTRACT (WEEK FROM t.start_time), 
                        EXTRACT (MONTH FROM t.start_time),
                        EXTRACT (YEAR FROM t.start_time), 
                        EXTRACT (WEEKDAY FROM t.start_time) 
                        FROM
                        (SELECT TIMESTAMP 'epoch' + ts/1000 *INTERVAL '1 second' as start_time FROM s_events where page =' NextSong' ) t;

""")


# Select Queries

data_count_f_songplays=(""" select count(*) from f_songplays; """)
data_count_d_songs=(""" select count(*) from d_songs; """)
data_count_d_artists=(""" select count(*) from d_artists; """)


# QUERY LISTS

# all table creations
create_table_queries = [staging_events_table_create, staging_songs_table_create, user_table_create, song_table_create, artist_table_create, time_table_create,songplay_table_create]

# dropping tables
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]

# copying from s3 to staging tables which are in Redshift
copy_table_queries = [staging_events_copy, staging_songs_copy]

# inserting data to  analytic tables , dim and facts
insert_table_queries = [user_table_insert, song_table_insert, artist_table_insert, time_table_insert,songplay_table_insert]

# select queries for testing your data in analytics tables
select_data_counts=[data_count_d_songs,data_count_d_artists,data_count_f_songplays]


